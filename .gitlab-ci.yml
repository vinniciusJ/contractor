image: docker:20.10.17

stages:
  - sonarqube-check
  - sonarqube-vulnerability-report
  - build
  - build latest image
  - build tagged image
  - tag version
  - deploy on vm

build:
  stage: build
  image: node:18-alpine
  only:
    - homologation
    - production
    - tags
  before_script:
    - npm i --silent
  script:
    - >
      npm run build -- --mode 
      $(case "$CI_COMMIT_BRANCH" in 
          production) echo "production" ;; 
          homologation) echo "homologation" ;; 
          development) echo "development" ;; 
          *) echo "production" ;; 
        esac)
  artifacts:
    expire_in: 1 hour
    paths:
      - dist

build latest image:
  stage: build latest image
  image: docker:20.10.17
  only:
    - production
    - homologation
  services:
    - docker:20.10.17-dind
  before_script:
    - docker login -u $HARBOR_USERNAME -p $HARBOR_PASSWORD $HARBOR_URL
  script:
    - docker build . -t $HARBOR_URL/$HARBOR_PROJECT/$CI_PROJECT_NAME:latest -t $HARBOR_URL/$HARBOR_PROJECT/$CI_PROJECT_NAME:$CI_COMMIT_SHA
    - docker push $HARBOR_URL/$HARBOR_PROJECT/$CI_PROJECT_NAME:latest
    - docker push $HARBOR_URL/$HARBOR_PROJECT/$CI_PROJECT_NAME:$CI_COMMIT_SHA
  after_script:
    - docker logout $HARBOR_URL

tag version:
  stage: tag version
  image: node:18-alpine
  only:
    - production
  before_script:
    - apk update && apk add git
    - export VERSION=$(node -p "require('./package.json').version")
  script:
    - git remote remove origin
    - git tag | xargs git tag -d
    - git remote add origin https://$PROJECT_USER:$PROJECT_PASS@$GIT_REMOTE_REPO
    - git config user.email gedt@pti.org.br
    - git config user.name $CI_PROJECT_NAME
    - git tag -a v$VERSION -m "Vers√£o $VERSION"
    - git push origin v$VERSION

build tagged image:
  stage: build tagged image
  image: docker:20.10.17
  only:
    - tags
  except:
    - branches
  services:
    - docker:20.10.17-dind
  before_script:
    - docker login -u $HARBOR_USERNAME -p $HARBOR_PASSWORD $HARBOR_URL
    - export TAG_VERSION=${CI_COMMIT_REF_NAME//"v"/}
  script:
    - docker build . -t $HARBOR_URL/$HARBOR_PROJECT/$CI_PROJECT_NAME:$TAG_VERSION
    - docker push $HARBOR_URL/$HARBOR_PROJECT/$CI_PROJECT_NAME:$TAG_VERSION
  after_script:
    - docker logout $HARBOR_URL

deploy on vm:
  stage: deploy on vm
  image: docker:20.10.17
  services:
    - docker:20.10.17-dind
  cache: {}
  only:
    - homologation
    - production
  variables:
    COMMAND: "docker login -u '$HARBOR_USERNAME' -p '$HARBOR_PASSWORD' $HARBOR_URL && docker-compose pull  && docker-compose up --force-recreate -d && docker logout $HARBOR_URL"
  script:
    - echo $COMMAND
    - 'which ssh-agent || ( apk update && apk add openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh -o StrictHostKeyChecking=no -l $SERVER_USER $SERVER_IP $COMMAND

sonarqube-check:
  stage: sonarqube-check
  image: 
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
  - development

sonarqube-vulnerability-report:
  stage: sonarqube-vulnerability-report
  image: alpine/curl:latest
  script:
    - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=${SONAR_PROJECT_KEY}&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
  allow_failure: true
  only:
  - development
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json
  dependencies:
    - sonarqube-check
